// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
import React from 'react';
import { VDomModel, VDomRenderer } from '@jupyterlab/apputils';
import { URLExt } from '@jupyterlab/coreutils';
import { ServerConnection } from '@jupyterlab/services';
import { Poll } from '@lumino/polling';
import { TextItem } from '..';
import { nbresuse } from '../style/text';
/**
 * A VDomRenderer for showing memory usage by a kernel.
 */
export class MemoryUsage extends VDomRenderer {
    /**
     * Construct a new memory usage status item.
     */
    constructor() {
        super(new MemoryUsage.Model({ refreshRate: 5000 }));
    }
    /**
     * Render the memory usage status item.
     */
    render() {
        if (!this.model) {
            return null;
        }
        let text;
        if (this.model.memoryLimit === null) {
            text = `Mem: ${this.model.currentMemory.toFixed(Private.DECIMAL_PLACES)} ${this.model.units}`;
        }
        else {
            text = `Mem: ${this.model.currentMemory.toFixed(Private.DECIMAL_PLACES)} / ${this.model.memoryLimit.toFixed(Private.DECIMAL_PLACES)} ${this.model.units}`;
        }
        if (!this.model.usageWarning) {
            return React.createElement(TextItem, { title: "Current mem usage", source: text });
        }
        else {
            return (React.createElement(TextItem, { title: "Current mem usage", source: text, className: nbresuse }));
        }
    }
}
/**
 * A namespace for MemoryUsage statics.
 */
(function (MemoryUsage) {
    /**
     * A VDomModel for the memory usage status item.
     */
    class Model extends VDomModel {
        /**
         * Construct a new memory usage model.
         *
         * @param options: the options for creating the model.
         */
        constructor(options) {
            super();
            this._currentMemory = 0;
            this._memoryLimit = null;
            this._metricsAvailable = false;
            this._units = 'B';
            this._warn = false;
            this._poll = new Poll({
                factory: () => Private.factory(),
                frequency: {
                    interval: options.refreshRate,
                    backoff: true
                },
                name: '@jupyterlab/statusbar:MemoryUsage#metrics'
            });
            this._poll.ticked.connect(poll => {
                const { payload, phase } = poll.state;
                if (phase === 'resolved') {
                    this._updateMetricsValues(payload);
                    return;
                }
                if (phase === 'rejected') {
                    const oldMetricsAvailable = this._metricsAvailable;
                    this._metricsAvailable = false;
                    this._currentMemory = 0;
                    this._memoryLimit = null;
                    this._units = 'B';
                    if (oldMetricsAvailable) {
                        this.stateChanged.emit();
                    }
                    return;
                }
            });
        }
        /**
         * Whether the metrics server extension is available.
         */
        get metricsAvailable() {
            return this._metricsAvailable;
        }
        /**
         * The current memory usage/
         */
        get currentMemory() {
            return this._currentMemory;
        }
        /**
         * The current memory limit, or null if not specified.
         */
        get memoryLimit() {
            return this._memoryLimit;
        }
        /**
         * The units for memory usages and limits.
         */
        get units() {
            return this._units;
        }
        /**
         * The warning for memory usage.
         */
        get usageWarning() {
            return this._warn;
        }
        /**
         * Dispose of the memory usage model.
         */
        dispose() {
            super.dispose();
            this._poll.dispose();
        }
        /**
         * Given the results of the metrics request, update model values.
         */
        _updateMetricsValues(value) {
            const oldMetricsAvailable = this._metricsAvailable;
            const oldCurrentMemory = this._currentMemory;
            const oldMemoryLimit = this._memoryLimit;
            const oldUnits = this._units;
            const oldUsageWarning = this._warn;
            if (value === null) {
                this._metricsAvailable = false;
                this._currentMemory = 0;
                this._memoryLimit = null;
                this._units = 'B';
                this._warn = false;
            }
            else {
                const numBytes = value.rss;
                const memoryLimit = value.limits.memory
                    ? value.limits.memory.rss
                    : null;
                const [currentMemory, units] = Private.convertToLargestUnit(numBytes);
                const usageWarning = value.limits.memory
                    ? value.limits.memory.warn
                    : false;
                this._metricsAvailable = true;
                this._currentMemory = currentMemory;
                this._units = units;
                this._memoryLimit = memoryLimit
                    ? memoryLimit / Private.MEMORY_UNIT_LIMITS[units]
                    : null;
                this._warn = usageWarning;
            }
            if (this._currentMemory !== oldCurrentMemory ||
                this._units !== oldUnits ||
                this._memoryLimit !== oldMemoryLimit ||
                this._metricsAvailable !== oldMetricsAvailable ||
                this._warn !== oldUsageWarning) {
                this.stateChanged.emit(void 0);
            }
        }
    }
    MemoryUsage.Model = Model;
})(MemoryUsage || (MemoryUsage = {}));
/**
 * A namespace for module private statics.
 */
var Private;
(function (Private) {
    /**
     * The number of decimal places to use when rendering memory usage.
     */
    Private.DECIMAL_PLACES = 2;
    /**
     * The number of bytes in each memory unit.
     */
    Private.MEMORY_UNIT_LIMITS = {
        B: 1,
        KB: 1024,
        MB: 1048576,
        GB: 1073741824,
        TB: 1099511627776,
        PB: 1125899906842624
    };
    /**
     * Given a number of bytes, convert to the most human-readable
     * format, (GB, TB, etc).
     */
    function convertToLargestUnit(numBytes) {
        if (numBytes < Private.MEMORY_UNIT_LIMITS.KB) {
            return [numBytes, 'B'];
        }
        else if (Private.MEMORY_UNIT_LIMITS.KB === numBytes ||
            numBytes < Private.MEMORY_UNIT_LIMITS.MB) {
            return [numBytes / Private.MEMORY_UNIT_LIMITS.KB, 'KB'];
        }
        else if (Private.MEMORY_UNIT_LIMITS.MB === numBytes ||
            numBytes < Private.MEMORY_UNIT_LIMITS.GB) {
            return [numBytes / Private.MEMORY_UNIT_LIMITS.MB, 'MB'];
        }
        else if (Private.MEMORY_UNIT_LIMITS.GB === numBytes ||
            numBytes < Private.MEMORY_UNIT_LIMITS.TB) {
            return [numBytes / Private.MEMORY_UNIT_LIMITS.GB, 'GB'];
        }
        else if (Private.MEMORY_UNIT_LIMITS.TB === numBytes ||
            numBytes < Private.MEMORY_UNIT_LIMITS.PB) {
            return [numBytes / Private.MEMORY_UNIT_LIMITS.TB, 'TB'];
        }
        else {
            return [numBytes / Private.MEMORY_UNIT_LIMITS.PB, 'PB'];
        }
    }
    Private.convertToLargestUnit = convertToLargestUnit;
    /**
     * Settings for making requests to the server.
     */
    const SERVER_CONNECTION_SETTINGS = ServerConnection.makeSettings();
    /**
     * The url endpoint for making requests to the server.
     */
    const METRIC_URL = URLExt.join(SERVER_CONNECTION_SETTINGS.baseUrl, 'metrics');
    /**
     * Make a request to the backend.
     */
    async function factory() {
        const request = ServerConnection.makeRequest(METRIC_URL, {}, SERVER_CONNECTION_SETTINGS);
        const response = await request;
        if (response.ok) {
            return await response.json();
        }
        return null;
    }
    Private.factory = factory;
})(Private || (Private = {}));
//# sourceMappingURL=memoryUsage.js.map